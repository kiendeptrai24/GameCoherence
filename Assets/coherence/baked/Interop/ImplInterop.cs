// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    using Coherence;
    using Coherence.Brisk;
    using Coherence.ProtocolDef;
    using Coherence.Connection;
    using Coherence.Entities;
    using System.Collections.Generic;
    using Coherence.SimulationFrame;
    using Coherence.Core;

    public class DataInteropHandler : IDataInteropHandler
    {
        public unsafe ICoherenceComponentData GetComponent(UInt32 type, IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            switch(type)
            {
                case 0: return WorldPosition.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 1: return WorldOrientation.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 2: return LocalUserComponent.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 3: return WorldPositionQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 4: return ArchetypeComponent.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 5: return Persistence.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 6: return ConnectedEntity.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 7: return UniqueID.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 8: return Connection.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 9: return ConnectionScene.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 10: return Global.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 11: return GlobalQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 12: return Tag.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 13: return TagQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 14: return PreserveChildren.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 15: return Scene.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 16: return AssetId.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 17: return GenericScale.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 18: return _27f1ac5097d4ee4409fbb87ad14f76c2_4939570989761225410.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 19: return _27f1ac5097d4ee4409fbb87ad14f76c2_6525610836190113121.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 20: return _6ba8b7030c4bf544396f864fc9dd99de_107609493621447933.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 21: return _a0e6252c4d09f4fb28257804194356b6_5156161361901559470.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 22: return _ba50eecfd968a47c38959f27b05771b6_5459872012036489579.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 23: return WorldPosition.FromInteropArchetype_27f1ac5097d4ee4409fbb87ad14f76c2_WorldPosition_LOD0(data, dataSize, simFrames, simFramesCount);
                case 24: return WorldOrientation.FromInteropArchetype_27f1ac5097d4ee4409fbb87ad14f76c2_WorldOrientation_LOD0(data, dataSize, simFrames, simFramesCount);
                case 25: return GenericScale.FromInteropArchetype_27f1ac5097d4ee4409fbb87ad14f76c2_GenericScale_LOD0(data, dataSize, simFrames, simFramesCount);
                case 26: return _27f1ac5097d4ee4409fbb87ad14f76c2_6525610836190113121.FromInteropArchetype_27f1ac5097d4ee4409fbb87ad14f76c2__27f1ac5097d4ee4409fbb87ad14f76c2_6525610836190113121_LOD0(data, dataSize, simFrames, simFramesCount);
                case 27: return _27f1ac5097d4ee4409fbb87ad14f76c2_4939570989761225410.FromInteropArchetype_27f1ac5097d4ee4409fbb87ad14f76c2__27f1ac5097d4ee4409fbb87ad14f76c2_4939570989761225410_LOD0(data, dataSize, simFrames, simFramesCount);
                case 28: return WorldPosition.FromInteropArchetype_6ba8b7030c4bf544396f864fc9dd99de_WorldPosition_LOD0(data, dataSize, simFrames, simFramesCount);
                case 29: return WorldOrientation.FromInteropArchetype_6ba8b7030c4bf544396f864fc9dd99de_WorldOrientation_LOD0(data, dataSize, simFrames, simFramesCount);
                case 30: return _6ba8b7030c4bf544396f864fc9dd99de_107609493621447933.FromInteropArchetype_6ba8b7030c4bf544396f864fc9dd99de__6ba8b7030c4bf544396f864fc9dd99de_107609493621447933_LOD0(data, dataSize, simFrames, simFramesCount);
                case 31: return WorldPosition.FromInteropArchetype_a0e6252c4d09f4fb28257804194356b6_WorldPosition_LOD0(data, dataSize, simFrames, simFramesCount);
                case 32: return WorldOrientation.FromInteropArchetype_a0e6252c4d09f4fb28257804194356b6_WorldOrientation_LOD0(data, dataSize, simFrames, simFramesCount);
                case 33: return GenericScale.FromInteropArchetype_a0e6252c4d09f4fb28257804194356b6_GenericScale_LOD0(data, dataSize, simFrames, simFramesCount);
                case 34: return _a0e6252c4d09f4fb28257804194356b6_5156161361901559470.FromInteropArchetype_a0e6252c4d09f4fb28257804194356b6__a0e6252c4d09f4fb28257804194356b6_5156161361901559470_LOD0(data, dataSize, simFrames, simFramesCount);
                case 35: return WorldPosition.FromInteropArchetype_a167402e36850884aa7ce3d374cd6c77_WorldPosition_LOD0(data, dataSize, simFrames, simFramesCount);
                case 36: return WorldOrientation.FromInteropArchetype_a167402e36850884aa7ce3d374cd6c77_WorldOrientation_LOD0(data, dataSize, simFrames, simFramesCount);
                case 37: return GenericScale.FromInteropArchetype_a167402e36850884aa7ce3d374cd6c77_GenericScale_LOD0(data, dataSize, simFrames, simFramesCount);
                case 38: return WorldPosition.FromInteropArchetype_ba50eecfd968a47c38959f27b05771b6_WorldPosition_LOD0(data, dataSize, simFrames, simFramesCount);
                case 39: return _ba50eecfd968a47c38959f27b05771b6_5459872012036489579.FromInteropArchetype_ba50eecfd968a47c38959f27b05771b6__ba50eecfd968a47c38959f27b05771b6_5459872012036489579_LOD0(data, dataSize, simFrames, simFramesCount);
            }

            throw new ArgumentException($"Unkown component type {type}", nameof(type));
        }

        public unsafe void UpdateComponent(INativeCoreComponentUpdater updater, InteropEntity entity, ICoherenceComponentData component)
        {
            var componentType = component.GetComponentType();
            var frames = component.GetSimulationFrames();

            switch (componentType)
            {
                case 0:
                {
                    var orig = (WorldPosition)component;
                    var val = new WorldPosition.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 12, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 1:
                {
                    var orig = (WorldOrientation)component;
                    var val = new WorldOrientation.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 2:
                {
                    var orig = (LocalUserComponent)component;
                    var val = new LocalUserComponent.Interop();

                    val.localIndex = orig.localIndex;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 3:
                {
                    var orig = (WorldPositionQuery)component;
                    var val = new WorldPositionQuery.Interop();

                    val.position = orig.position;
                    val.radius = orig.radius;
                    val.buffer = orig.buffer;

                    updater.UpdateComponent(entity, componentType, val, 20, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 4:
                {
                    var orig = (ArchetypeComponent)component;
                    var val = new ArchetypeComponent.Interop();

                    val.index = orig.index;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 5:
                {
                    var orig = (Persistence)component;
                    var val = new Persistence.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 6:
                {
                    var orig = (ConnectedEntity)component;
                    var val = new ConnectedEntity.Interop();

                    val.value = orig.value;
                    val.pos = orig.pos;
                    val.rot = orig.rot;
                    val.scale = orig.scale;

                    updater.UpdateComponent(entity, componentType, val, 44, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 7:
                {
                    var orig = (UniqueID)component;
                    var val = new UniqueID.Interop();

                    var pinneduuid = orig.uuid != null ? Encoding.UTF8.GetBytes(orig.uuid) : null; fixed (void* pinnedPtruuid = pinneduuid) { val.uuid = new ByteArray { Data = pinnedPtruuid, Length =  pinneduuid?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 8:
                {
                    var orig = (Connection)component;
                    var val = new Connection.Interop();

                    val.id = orig.id;
                    val.type = orig.type;

                    updater.UpdateComponent(entity, componentType, val, 8, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 9:
                {
                    var orig = (ConnectionScene)component;
                    var val = new ConnectionScene.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 10:
                {
                    var orig = (Global)component;
                    var val = new Global.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 11:
                {
                    var orig = (GlobalQuery)component;
                    var val = new GlobalQuery.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 12:
                {
                    var orig = (Tag)component;
                    var val = new Tag.Interop();

                    var pinnedtag = orig.tag != null ? Encoding.UTF8.GetBytes(orig.tag) : null; fixed (void* pinnedPtrtag = pinnedtag) { val.tag = new ByteArray { Data = pinnedPtrtag, Length =  pinnedtag?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 13:
                {
                    var orig = (TagQuery)component;
                    var val = new TagQuery.Interop();

                    var pinnedtag = orig.tag != null ? Encoding.UTF8.GetBytes(orig.tag) : null; fixed (void* pinnedPtrtag = pinnedtag) { val.tag = new ByteArray { Data = pinnedPtrtag, Length =  pinnedtag?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 14:
                {
                    var orig = (PreserveChildren)component;
                    var val = new PreserveChildren.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 15:
                {
                    var orig = (Scene)component;
                    var val = new Scene.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 16:
                {
                    var orig = (AssetId)component;
                    var val = new AssetId.Interop();

                    val.value = orig.value;
                    val.isFromGroup = orig.isFromGroup ? (System.Byte)1 : (System.Byte)0;

                    updater.UpdateComponent(entity, componentType, val, 5, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 17:
                {
                    var orig = (GenericScale)component;
                    var val = new GenericScale.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 12, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 18:
                {
                    var orig = (_27f1ac5097d4ee4409fbb87ad14f76c2_4939570989761225410)component;
                    var val = new _27f1ac5097d4ee4409fbb87ad14f76c2_4939570989761225410.Interop();

                    var pinnedpath = orig.path != null ? Encoding.UTF8.GetBytes(orig.path) : null; fixed (void* pinnedPtrpath = pinnedpath) { val.path = new ByteArray { Data = pinnedPtrpath, Length =  pinnedpath?.Length ?? 0 };
                    val.pathDirtyCounter = orig.pathDirtyCounter;

                    updater.UpdateComponent(entity, componentType, val, 20, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 19:
                {
                    var orig = (_27f1ac5097d4ee4409fbb87ad14f76c2_6525610836190113121)component;
                    var val = new _27f1ac5097d4ee4409fbb87ad14f76c2_6525610836190113121.Interop();

                    val.isBeingCarried = orig.isBeingCarried ? (System.Byte)1 : (System.Byte)0;

                    updater.UpdateComponent(entity, componentType, val, 1, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 20:
                {
                    var orig = (_6ba8b7030c4bf544396f864fc9dd99de_107609493621447933)component;
                    var val = new _6ba8b7030c4bf544396f864fc9dd99de_107609493621447933.Interop();

                    val.timer = orig.timer;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 21:
                {
                    var orig = (_a0e6252c4d09f4fb28257804194356b6_5156161361901559470)component;
                    var val = new _a0e6252c4d09f4fb28257804194356b6_5156161361901559470.Interop();

                    var pinnedpath = orig.path != null ? Encoding.UTF8.GetBytes(orig.path) : null; fixed (void* pinnedPtrpath = pinnedpath) { val.path = new ByteArray { Data = pinnedPtrpath, Length =  pinnedpath?.Length ?? 0 };
                    val.pathDirtyCounter = orig.pathDirtyCounter;

                    updater.UpdateComponent(entity, componentType, val, 20, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 22:
                {
                    var orig = (_ba50eecfd968a47c38959f27b05771b6_5459872012036489579)component;
                    var val = new _ba50eecfd968a47c38959f27b05771b6_5459872012036489579.Interop();

                    val.timer = orig.timer;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
            }

            throw new NotImplementedException($"Failed to update a component with type {componentType}.");
        }

        public unsafe IEntityCommand GetCommand(UInt32 type, IntPtr data, Int32 dataSize)
        {
            switch (type)
            {
                  case 0: return AuthorityRequest.FromInterop(data, dataSize);
                  case 1: return AuthorityTransfer.FromInterop(data, dataSize);
                  case 2: return QuerySynced.FromInterop(data, dataSize);
                  case 3: return AdoptOrphan.FromInterop(data, dataSize);
                  case 4: return PersistenceReady.FromInterop(data, dataSize);
                  case 5: return SceneIndexChanged.FromInterop(data, dataSize);
                  case 6: return _ebd8dda8688470340af97f69a9c4d9de_08ae9e1a8a6d4b5ab3a455fb480466b2.FromInterop(data, dataSize);
                  case 7: return _ebd8dda8688470340af97f69a9c4d9de_c81e2014c5d24664992a72dc70220deb.FromInterop(data, dataSize);
            }

            throw new ArgumentException($"Unkown command type {type}", nameof(type));
        }

        public unsafe IEntityInput GetInput(UInt32 type, IntPtr data, Int32 dataSize)
        {
            throw new ArgumentException($"Unknown input type {type}", nameof(type));
        }

        public unsafe bool SendCommand(INativeCoreCommandSender sender, InteropEntity entity, MessageTarget target, IEntityCommand command)
        {
            var type = command.GetComponentType();
            switch (type)
            {
                case 0:
                {
                    var orig = (AuthorityRequest)command;
                    var val = new AuthorityRequest.Interop();

                    val.requester = orig.requester;
                    val.authorityType = orig.authorityType;

                    return sender.SendCommand(entity, target, type, val, 8);

                }
                case 1:
                {
                    var orig = (AuthorityTransfer)command;
                    var val = new AuthorityTransfer.Interop();

                    val.newAuthority = orig.newAuthority;
                    val.accepted = orig.accepted ? (System.Byte)1 : (System.Byte)0;
                    val.authorityType = orig.authorityType;

                    return sender.SendCommand(entity, target, type, val, 9);

                }
                case 2:
                {
                    var orig = (QuerySynced)command;
                    var val = new QuerySynced.Interop();

                    val.liveQuerySynced = orig.liveQuerySynced ? (System.Byte)1 : (System.Byte)0;
                    val.globalQuerySynced = orig.globalQuerySynced ? (System.Byte)1 : (System.Byte)0;

                    return sender.SendCommand(entity, target, type, val, 2);

                }
                case 3:
                {
                    var orig = (AdoptOrphan)command;
                    var val = new AdoptOrphan.Interop();


                    return sender.SendCommand(entity, target, type, val, 0);

                }
                case 4:
                {
                    var orig = (PersistenceReady)command;
                    var val = new PersistenceReady.Interop();


                    return sender.SendCommand(entity, target, type, val, 0);

                }
                case 5:
                {
                    var orig = (SceneIndexChanged)command;
                    var val = new SceneIndexChanged.Interop();

                    val.sceneIndex = orig.sceneIndex;

                    return sender.SendCommand(entity, target, type, val, 4);

                }
                case 6:
                {
                    var orig = (_ebd8dda8688470340af97f69a9c4d9de_08ae9e1a8a6d4b5ab3a455fb480466b2)command;
                    var val = new _ebd8dda8688470340af97f69a9c4d9de_08ae9e1a8a6d4b5ab3a455fb480466b2.Interop();


                    return sender.SendCommand(entity, target, type, val, 0);

                }
                case 7:
                {
                    var orig = (_ebd8dda8688470340af97f69a9c4d9de_c81e2014c5d24664992a72dc70220deb)command;
                    var val = new _ebd8dda8688470340af97f69a9c4d9de_c81e2014c5d24664992a72dc70220deb.Interop();

                    var pinnedmessage = orig.message != null ? Encoding.UTF8.GetBytes(orig.message) : null; fixed (void* pinnedPtrmessage = pinnedmessage) { val.message = new ByteArray { Data = pinnedPtrmessage, Length =  pinnedmessage?.Length ?? 0 };

                    return sender.SendCommand(entity, target, type, val, 16);

}                }
            }

            throw new NotImplementedException($"Failed to send a command with type {type}.");
        }

        public unsafe void SendInput(INativeCoreInputSender sender, InteropEntity entity, long frame, IEntityInput input)
        {
            var type = input.GetComponentType();

            throw new NotImplementedException($"Failed to send an input with type {type}.");
        }
    }

}
