// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using Coherence.Connection;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public ByteArray animName;
            [FieldOffset(16)]
            public System.Int32 value;
        }

        public static unsafe _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 20) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for command with ID 9");
            }

            var orig = new _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742();
            var comp = (Interop*)data;
            orig.animName = comp->animName.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->animName.Data, (int)comp->animName.Length) : null;
            orig.value = comp->value;
            return orig;
        }

        public System.String animName;
        public System.Int32 value;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Target { get; set; }
        public MessageTarget Routing { get; set; }
        public uint SenderParticipant { get; set; }
        public ClientID SenderClientID { get; set; }
        public long Frame { get; set; }
        public uint GetComponentType() => 9;
        public bool UsesMeta { get; set; }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return default;
        }

        public void NullEntityRefs(Entity entity) {
        }
        
        public _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(
            Entity entity,
            System.String animName,
            System.Int32 value
        )
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Target = default;
            Routing = MessageTarget.All;
            SenderParticipant = 0;
            SenderClientID = default;
            Frame = 0;
            UsesMeta = false;

            this.animName = animName; 
            this.value = value; 
        }
        
        public static void Serialize(_ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteShortString(commandData.animName);
            bitStream.WriteIntegerRange(commandData.value, 32, -2147483648);
        }
        
        public static _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var dataanimName = bitStream.ReadShortString();
            var datavalue = bitStream.ReadIntegerRange(32, -2147483648);
    
            return new _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742()
            {
                Entity = entity,
                Routing = target,
                Target = target,
                animName = dataanimName,
                value = datavalue
            };   
        }
    }

}
