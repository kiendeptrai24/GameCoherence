// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    [UnityEngine.Scripting.Preserve]
    public class Binding_ca720d4ebce92554188a78a1512b88d3_d2af16a869ac443298470b11f80646bb : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_ca720d4ebce92554188a78a1512b88d3_9263da6620484b018bfe8ea133e573a4 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldOrientation);
        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;

            var simFrame = ((WorldOrientation)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }
    [UnityEngine.Scripting.Preserve]
    public class Binding_ca720d4ebce92554188a78a1512b88d3_2e1d43beee8547c3acb97ca089f33ba8 : ScaleBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(GenericScale);
        public override string CoherenceComponentName => "GenericScale";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherenceLocalScale); }
            set { coherenceSync.coherenceLocalScale = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((GenericScale)coherenceComponent).value;

            var simFrame = ((GenericScale)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (GenericScale)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new GenericScale();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_ca720d4ebce92554188a78a1512b88d3 : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_ca720d4ebce92554188a78a1512b88d3>();
        
        private global::AnimationSync _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e_CommandTarget;
        private global::AnimationSync _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742_CommandTarget;
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
			["d2af16a869ac443298470b11f80646bb"] = new Binding_ca720d4ebce92554188a78a1512b88d3_d2af16a869ac443298470b11f80646bb(),
			["9263da6620484b018bfe8ea133e573a4"] = new Binding_ca720d4ebce92554188a78a1512b88d3_9263da6620484b018bfe8ea133e573a4(),
			["2e1d43beee8547c3acb97ca089f33ba8"] = new Binding_ca720d4ebce92554188a78a1512b88d3_2e1d43beee8547c3acb97ca089f33ba8(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_ca720d4ebce92554188a78a1512b88d3()
        {
            bakedCommandBindings.Add("27c99cf5ed374028996940463609a70e", BakeCommandBinding__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e);
            bakedCommandBindings.Add("e3ea5d70793143c0a65cb3054b3a0742", BakeCommandBinding__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742);
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        private void BakeCommandBinding__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e_CommandTarget = (global::AnimationSync)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand(
            	"AnimationSync.SetBool",
            	"(System.StringSystem.Boolean)",
            	SendCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e,
            	ReceiveLocalCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e,
            	MessageTarget.All,
            	_ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e_CommandTarget,
            	commandBinding.UsesMeta());
        }
        
        private void SendCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(GenericCommandRequestArgs requestArgs)
        {
            var command = new _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e();
            command.Frame = requestArgs.Frame;
            command.SenderClientID = requestArgs.Sender;
            command.UsesMeta = requestArgs.UsesMeta;
            command.Target = requestArgs.Target;
            command.Entity = entityId;

            command.animName = (System.String)requestArgs.Args[0];
            command.value = (System.Boolean)requestArgs.Args[1];

            client.SendCommand(command, requestArgs.ChannelID);
        }
        
        private void ReceiveLocalCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(GenericCommandRequestArgs requestArgs)
        {
            var command = new _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e();
            command.Frame = requestArgs.Frame;
            command.SenderClientID = requestArgs.Sender;

            command.animName = (System.String)requestArgs.Args[0];
            command.value = (System.Boolean)requestArgs.Args[1];

            ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(command);
        }

        private void ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(_ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e command)
        {
            var target = _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e_CommandTarget;
			target.SetBool((System.String)(command.animName),(System.Boolean)(command.value));
        }
        private void BakeCommandBinding__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742_CommandTarget = (global::AnimationSync)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand(
            	"AnimationSync.SetFloat",
            	"(System.StringSystem.Int32)",
            	SendCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742,
            	ReceiveLocalCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742,
            	MessageTarget.All,
            	_ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742_CommandTarget,
            	commandBinding.UsesMeta());
        }
        
        private void SendCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(GenericCommandRequestArgs requestArgs)
        {
            var command = new _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742();
            command.Frame = requestArgs.Frame;
            command.SenderClientID = requestArgs.Sender;
            command.UsesMeta = requestArgs.UsesMeta;
            command.Target = requestArgs.Target;
            command.Entity = entityId;

            command.animName = (System.String)requestArgs.Args[0];
            command.value = (System.Int32)requestArgs.Args[1];

            client.SendCommand(command, requestArgs.ChannelID);
        }
        
        private void ReceiveLocalCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(GenericCommandRequestArgs requestArgs)
        {
            var command = new _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742();
            command.Frame = requestArgs.Frame;
            command.SenderClientID = requestArgs.Sender;

            command.animName = (System.String)requestArgs.Args[0];
            command.value = (System.Int32)requestArgs.Args[1];

            ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(command);
        }

        private void ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(_ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 command)
        {
            var target = _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742_CommandTarget;
			target.SetFloat((System.String)(command.animName),(System.Int32)(command.value));
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                case _ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e castedCommand:
                    ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_27c99cf5ed374028996940463609a70e(castedCommand);
                    break;
                case _ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742 castedCommand:
                    ReceiveCommand__ca720d4ebce92554188a78a1512b88d3_e3ea5d70793143c0a65cb3054b3a0742(castedCommand);
                    break;
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_ca720d4ebce92554188a78a1512b88d3 Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override void CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame, List<ICoherenceComponentData> components)
        {

            if (!usesLodsAtRuntime)
            {
                return;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                components.Add(new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                );

                return;                
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_ca720d4ebce92554188a78a1512b88d3>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
